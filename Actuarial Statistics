{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/josefinavanotti/josefinavanotti/blob/main/TP_Python_Estad%C3%ADsitica_Actuarial.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e0Lo7AwsVWjp"
      },
      "source": [
        "# **2.1 Estadística Descriptiva y Manejo de Datos**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yw7pKP44Xb0m"
      },
      "source": [
        "Importo las librerías que se van a utilizar:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "4gT2klCJXZt8"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statistics\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sn\n",
        "\n",
        "from scipy import stats\n",
        "from random import sample\n",
        "from scipy.stats import norm\n",
        "import warnings\n",
        "\n",
        "import itertools \n",
        "\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "plt.style.use('tableau-colorblind10')\n",
        "\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.tsa.api as smt\n",
        "import matplotlib\n",
        "\n",
        "warnings.simplefilter(\"ignore\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YzAEs_PiX3dh"
      },
      "source": [
        "Importación y lectura del archivo:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "GpkF3RzHX67i",
        "outputId": "06465656-0e67-4306-b547-9ef19a37f2f0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-bffea7a7-4277-4de9-baac-d13ca511810a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-bffea7a7-4277-4de9-baac-d13ca511810a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving WorldCupMatches.csv to WorldCupMatches (1).csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "cF1AjSyAYOW3"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('WorldCupMatches.csv') "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "ZQz01rv9w6iQ",
        "outputId": "b700c2a9-e9ca-4299-fc78-4dd9ecdbf696"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year              Datetime    Stage         Stadium         City  \\\n",
              "0  1930.0  13 Jul 1930 - 15:00   Group 1         Pocitos  Montevideo    \n",
              "1  1930.0  13 Jul 1930 - 15:00   Group 4  Parque Central  Montevideo    \n",
              "2  1930.0  14 Jul 1930 - 12:45   Group 2  Parque Central  Montevideo    \n",
              "3  1930.0  14 Jul 1930 - 14:50   Group 3         Pocitos  Montevideo    \n",
              "4  1930.0  15 Jul 1930 - 16:00   Group 1  Parque Central  Montevideo    \n",
              "\n",
              "  Home Team Name  Home Team Goals  Away Team Goals Away Team Name  \\\n",
              "0         France              4.0              1.0         Mexico   \n",
              "1            USA              3.0              0.0        Belgium   \n",
              "2     Yugoslavia              2.0              1.0         Brazil   \n",
              "3        Romania              3.0              1.0           Peru   \n",
              "4      Argentina              1.0              0.0         France   \n",
              "\n",
              "  Win conditions  Attendance  Half-time Home Goals  Half-time Away Goals  \\\n",
              "0                     4444.0                   3.0                   0.0   \n",
              "1                    18346.0                   2.0                   0.0   \n",
              "2                    24059.0                   2.0                   0.0   \n",
              "3                     2549.0                   1.0                   0.0   \n",
              "4                    23409.0                   0.0                   0.0   \n",
              "\n",
              "                  Referee               Assistant 1  \\\n",
              "0  LOMBARDI Domingo (URU)     CRISTOPHE Henry (BEL)   \n",
              "1       MACIAS Jose (ARG)  MATEUCCI Francisco (URU)   \n",
              "2     TEJADA Anibal (URU)   VALLARINO Ricardo (URU)   \n",
              "3   WARNKEN Alberto (CHI)       LANGENUS Jean (BEL)   \n",
              "4     REGO Gilberto (BRA)      SAUCEDO Ulises (BOL)   \n",
              "\n",
              "                  Assistant 2  RoundID  MatchID Home Team Initials  \\\n",
              "0         REGO Gilberto (BRA)    201.0   1096.0                FRA   \n",
              "1       WARNKEN Alberto (CHI)    201.0   1090.0                USA   \n",
              "2         BALWAY Thomas (FRA)    201.0   1093.0                YUG   \n",
              "3    MATEUCCI Francisco (URU)    201.0   1098.0                ROU   \n",
              "4  RADULESCU Constantin (ROU)    201.0   1085.0                ARG   \n",
              "\n",
              "  Away Team Initials  \n",
              "0                MEX  \n",
              "1                BEL  \n",
              "2                BRA  \n",
              "3                PER  \n",
              "4                FRA  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aac911b2-9391-4aa8-b632-7f9667c14d68\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Datetime</th>\n",
              "      <th>Stage</th>\n",
              "      <th>Stadium</th>\n",
              "      <th>City</th>\n",
              "      <th>Home Team Name</th>\n",
              "      <th>Home Team Goals</th>\n",
              "      <th>Away Team Goals</th>\n",
              "      <th>Away Team Name</th>\n",
              "      <th>Win conditions</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Half-time Home Goals</th>\n",
              "      <th>Half-time Away Goals</th>\n",
              "      <th>Referee</th>\n",
              "      <th>Assistant 1</th>\n",
              "      <th>Assistant 2</th>\n",
              "      <th>RoundID</th>\n",
              "      <th>MatchID</th>\n",
              "      <th>Home Team Initials</th>\n",
              "      <th>Away Team Initials</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>13 Jul 1930 - 15:00</td>\n",
              "      <td>Group 1</td>\n",
              "      <td>Pocitos</td>\n",
              "      <td>Montevideo</td>\n",
              "      <td>France</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Mexico</td>\n",
              "      <td></td>\n",
              "      <td>4444.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>LOMBARDI Domingo (URU)</td>\n",
              "      <td>CRISTOPHE Henry (BEL)</td>\n",
              "      <td>REGO Gilberto (BRA)</td>\n",
              "      <td>201.0</td>\n",
              "      <td>1096.0</td>\n",
              "      <td>FRA</td>\n",
              "      <td>MEX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>13 Jul 1930 - 15:00</td>\n",
              "      <td>Group 4</td>\n",
              "      <td>Parque Central</td>\n",
              "      <td>Montevideo</td>\n",
              "      <td>USA</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Belgium</td>\n",
              "      <td></td>\n",
              "      <td>18346.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MACIAS Jose (ARG)</td>\n",
              "      <td>MATEUCCI Francisco (URU)</td>\n",
              "      <td>WARNKEN Alberto (CHI)</td>\n",
              "      <td>201.0</td>\n",
              "      <td>1090.0</td>\n",
              "      <td>USA</td>\n",
              "      <td>BEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>14 Jul 1930 - 12:45</td>\n",
              "      <td>Group 2</td>\n",
              "      <td>Parque Central</td>\n",
              "      <td>Montevideo</td>\n",
              "      <td>Yugoslavia</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Brazil</td>\n",
              "      <td></td>\n",
              "      <td>24059.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>TEJADA Anibal (URU)</td>\n",
              "      <td>VALLARINO Ricardo (URU)</td>\n",
              "      <td>BALWAY Thomas (FRA)</td>\n",
              "      <td>201.0</td>\n",
              "      <td>1093.0</td>\n",
              "      <td>YUG</td>\n",
              "      <td>BRA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>14 Jul 1930 - 14:50</td>\n",
              "      <td>Group 3</td>\n",
              "      <td>Pocitos</td>\n",
              "      <td>Montevideo</td>\n",
              "      <td>Romania</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Peru</td>\n",
              "      <td></td>\n",
              "      <td>2549.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>WARNKEN Alberto (CHI)</td>\n",
              "      <td>LANGENUS Jean (BEL)</td>\n",
              "      <td>MATEUCCI Francisco (URU)</td>\n",
              "      <td>201.0</td>\n",
              "      <td>1098.0</td>\n",
              "      <td>ROU</td>\n",
              "      <td>PER</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>15 Jul 1930 - 16:00</td>\n",
              "      <td>Group 1</td>\n",
              "      <td>Parque Central</td>\n",
              "      <td>Montevideo</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>France</td>\n",
              "      <td></td>\n",
              "      <td>23409.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>REGO Gilberto (BRA)</td>\n",
              "      <td>SAUCEDO Ulises (BOL)</td>\n",
              "      <td>RADULESCU Constantin (ROU)</td>\n",
              "      <td>201.0</td>\n",
              "      <td>1085.0</td>\n",
              "      <td>ARG</td>\n",
              "      <td>FRA</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aac911b2-9391-4aa8-b632-7f9667c14d68')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aac911b2-9391-4aa8-b632-7f9667c14d68 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aac911b2-9391-4aa8-b632-7f9667c14d68');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "df = df.drop_duplicates()\n",
        "df = df[df['Year'].notna()]\n",
        "df.shape#836 filas\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bwr8awgBZW6A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c46a4c3c-ef71-4a89-bac0-0f04ed2f1d30"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Year', 'Datetime', 'Stage', 'Stadium', 'City', 'Home Team Name',\n",
              "       'Home Team Goals', 'Away Team Goals', 'Away Team Name',\n",
              "       'Win conditions', 'Attendance', 'Half-time Home Goals',\n",
              "       'Half-time Away Goals', 'Referee', 'Assistant 1', 'Assistant 2',\n",
              "       'RoundID', 'MatchID', 'Home Team Initials', 'Away Team Initials'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uf58SFGfZdIq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27dbab57-cdb6-46b7-fd8f-226c0a053599"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 836 entries, 0 to 835\n",
            "Data columns (total 20 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   Year                  836 non-null    float64\n",
            " 1   Datetime              836 non-null    object \n",
            " 2   Stage                 836 non-null    object \n",
            " 3   Stadium               836 non-null    object \n",
            " 4   City                  836 non-null    object \n",
            " 5   Home Team Name        836 non-null    object \n",
            " 6   Home Team Goals       836 non-null    float64\n",
            " 7   Away Team Goals       836 non-null    float64\n",
            " 8   Away Team Name        836 non-null    object \n",
            " 9   Win conditions        836 non-null    object \n",
            " 10  Attendance            835 non-null    float64\n",
            " 11  Half-time Home Goals  836 non-null    float64\n",
            " 12  Half-time Away Goals  836 non-null    float64\n",
            " 13  Referee               836 non-null    object \n",
            " 14  Assistant 1           836 non-null    object \n",
            " 15  Assistant 2           836 non-null    object \n",
            " 16  RoundID               836 non-null    float64\n",
            " 17  MatchID               836 non-null    float64\n",
            " 18  Home Team Initials    836 non-null    object \n",
            " 19  Away Team Initials    836 non-null    object \n",
            "dtypes: float64(8), object(12)\n",
            "memory usage: 137.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zGM8gA5TZpPt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "a8584afc-e33b-4734-ada4-d2f976b1b7ca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Year  Home Team Goals  Away Team Goals  Attendance  \\\n",
              "count   836.0            836.0            836.0       835.0   \n",
              "mean   1985.0              2.0              1.0     44859.0   \n",
              "std      22.0              2.0              1.0     23551.0   \n",
              "min    1930.0              0.0              0.0      2000.0   \n",
              "25%    1970.0              1.0              0.0     29800.0   \n",
              "50%    1990.0              2.0              1.0     41000.0   \n",
              "75%    2002.0              3.0              2.0     61009.0   \n",
              "max    2014.0             10.0              7.0    173850.0   \n",
              "\n",
              "       Half-time Home Goals  Half-time Away Goals     RoundID      MatchID  \n",
              "count                 836.0                 836.0       836.0        836.0  \n",
              "mean                    1.0                   0.0  10860927.0   56775774.0  \n",
              "std                     1.0                   1.0  27518016.0  107032911.0  \n",
              "min                     0.0                   0.0       201.0         25.0  \n",
              "25%                     0.0                   0.0       262.0       1184.0  \n",
              "50%                     0.0                   0.0       337.0       2114.0  \n",
              "75%                     1.0                   1.0    249722.0   43950047.0  \n",
              "max                     6.0                   5.0  97410600.0  300186515.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48b5da5b-96ed-43eb-bed6-9500cb0e27db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Home Team Goals</th>\n",
              "      <th>Away Team Goals</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Half-time Home Goals</th>\n",
              "      <th>Half-time Away Goals</th>\n",
              "      <th>RoundID</th>\n",
              "      <th>MatchID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>836.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>835.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>836.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1985.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>44859.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10860927.0</td>\n",
              "      <td>56775774.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>22.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23551.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>27518016.0</td>\n",
              "      <td>107032911.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1930.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>201.0</td>\n",
              "      <td>25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1970.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>29800.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>262.0</td>\n",
              "      <td>1184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1990.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>337.0</td>\n",
              "      <td>2114.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2002.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>61009.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>249722.0</td>\n",
              "      <td>43950047.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2014.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>173850.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>97410600.0</td>\n",
              "      <td>300186515.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48b5da5b-96ed-43eb-bed6-9500cb0e27db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-48b5da5b-96ed-43eb-bed6-9500cb0e27db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-48b5da5b-96ed-43eb-bed6-9500cb0e27db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "round(df.describe()) #Estadísticas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KBsV7yJsbKEd"
      },
      "source": [
        "## ▶*Problem 1*\n",
        "Obtenga la cantidad total de goles en los mundiales del año:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9sSXG04bRyD",
        "outputId": "fea4fc86-dbe7-4417-a742-66c2b5281d9e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     total_goals\n",
            "0            5.0\n",
            "1            3.0\n",
            "2            3.0\n",
            "3            4.0\n",
            "4            1.0\n",
            "..           ...\n",
            "831          1.0\n",
            "832          3.0\n",
            "833          2.0\n",
            "834          1.0\n",
            "835          3.0\n",
            "\n",
            "[836 rows x 1 columns]\n"
          ]
        }
      ],
      "source": [
        "total_goals= df['Home Team Goals'] + df['Away Team Goals']\n",
        "df = df.assign(total_goals=total_goals)\n",
        "print(df. iloc[:,-1:])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5akUdNlWt0im",
        "outputId": "1b407ae4-1555-4e83-afcd-5a60719ccbe9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "la cantidad total de goles en el mundial del año 1978 fue: 102.0\n"
          ]
        }
      ],
      "source": [
        "goals_78=sum(df[df['Year'] == 1978]['total_goals'])\n",
        "goals_78\n",
        "print(\"la cantidad total de goles en el mundial del año 1978 fue:\", goals_78 )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lv-ftJg85nnd",
        "outputId": "37090e8b-cae0-4591-d5ca-b8bb0b69938e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "la cantidad total de goles en el mundial del año 1986 fue: 132.0\n"
          ]
        }
      ],
      "source": [
        "goals_86=sum(df[df['Year'] == 1986]['total_goals'])\n",
        "goals_86\n",
        "print(\"la cantidad total de goles en el mundial del año 1986 fue:\", goals_86 )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_23Tujbl5tj6",
        "outputId": "50185298-6cf9-43b1-f76c-28d7e9b03ed9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "la cantidad total de goles en el mundial del año 1990 fue: 115.0\n"
          ]
        }
      ],
      "source": [
        "goals_90=sum(df[df['Year'] == 1990]['total_goals'])\n",
        "goals_90\n",
        "print(\"la cantidad total de goles en el mundial del año 1990 fue:\", goals_90 )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P1fhdOmu7M_J"
      },
      "source": [
        "## ▶*Problem 2:*\n",
        " Obtenga la cantidad de goles anotados por Argentina entre 1998 y 2010, inclusive.\n",
        "¿Cuántos fueron de ’local’ (home) y cuántos de ’visitante’ (away)?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KVLgKdsp9KOI",
        "outputId": "a281b449-d5b1-46f7-d784-c29e00cd186f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La cantidad de goles anotados por Argentina entre 1998 y 2010 fue de: 33.0 . Los goles de local fueron 28.0 y los goles de visitante fueron 5.0\n"
          ]
        }
      ],
      "source": [
        "\n",
        "year_range_query = (df['Year'] >= 1998) & (df['Year'] <= 2010)\n",
        "wcp = df[year_range_query]\n",
        "arg_local_goals = sum(wcp[wcp['Home Team Name'] == 'Argentina']['Home Team Goals'])\n",
        "arg_away_goals = sum(wcp[wcp['Away Team Name'] == 'Argentina']['Away Team Goals'])\n",
        "total_arg_goals = arg_local_goals + arg_away_goals\n",
        "\n",
        "print('La cantidad de goles anotados por Argentina entre 1998 y 2010 fue de:',total_arg_goals, '. Los goles de local fueron',arg_local_goals , 'y los goles de visitante fueron' , arg_away_goals )\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ruor9q5L60WN"
      },
      "source": [
        "## ▶ Problem 3\n",
        "¿Cuál de los siguientes países jugó más mundiales: Brasil, Inglaterra o Francia? Indique\n",
        "el total de veces que jugó cada uno.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mvNqwYwFAf2G"
      },
      "outputs": [],
      "source": [
        "#Recuento de mundiales que jugó Brasil\n",
        "bra_matches_home = (df['Home Team Name'] == 'Brazil')\n",
        "bra_matches_away = (df['Away Team Name'] == 'Brazil')\n",
        "bmh = df[bra_matches_home]\n",
        "bma = df[bra_matches_away]\n",
        "bra_cups_home = bmh[['Year','Home Team Name']]\n",
        "bra_cups_home = bra_cups_home.drop_duplicates()\n",
        "bra_cups_away = bma[['Year', 'Away Team Name']]\n",
        "bra_cups_away = bra_cups_home.drop_duplicates()\n",
        "bra_cups = pd.merge(bra_cups_home,bra_cups_away,how='outer')\n",
        "total_bra_cups = bra_cups.count()['Year']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nKY1woQuAnwm"
      },
      "outputs": [],
      "source": [
        "#Recuento de mundiales que jugó Inglaterra\n",
        "eng_matches_home = (df['Home Team Name'] == 'England')\n",
        "eng_matches_away = (df['Away Team Name'] == 'England')\n",
        "emh = df[eng_matches_home]\n",
        "ema = df[eng_matches_away]\n",
        "eng_cups_home = emh[['Year','Home Team Name']]\n",
        "eng_cups_home = eng_cups_home.drop_duplicates()\n",
        "eng_cups_away = ema[['Year', 'Away Team Name']]\n",
        "eng_cups_away = eng_cups_home.drop_duplicates()\n",
        "eng_cups = pd.merge(eng_cups_home,eng_cups_away,how='outer')\n",
        "total_eng_cups = eng_cups.count()['Year']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4UwIy8zABOZj"
      },
      "outputs": [],
      "source": [
        "#Recuento de mundiales que jugó Francia\n",
        "fra_matches_home = (df['Home Team Name'] == 'France')\n",
        "fra_matches_away = (df['Away Team Name'] == 'France')\n",
        "fmh = df[fra_matches_home]\n",
        "fma = df[fra_matches_away]\n",
        "fra_cups_home = fmh[['Year','Home Team Name']]\n",
        "fra_cups_home = fra_cups_home.drop_duplicates()\n",
        "fra_cups_away = fma[['Year', 'Away Team Name']]\n",
        "fra_cups_away = fra_cups_home.drop_duplicates()\n",
        "fra_cups = pd.merge(fra_cups_home,fra_cups_away,how='outer')\n",
        "total_fra_cups = fra_cups.count()['Year']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4fITUC81TGYq",
        "outputId": "d2e66cea-935e-4b9a-9848-2e818180e01d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El país que jugó más mundiales fue Brasil con 19 - Francia jugó 13 - Inglaterra jugó 14\n"
          ]
        }
      ],
      "source": [
        "if total_fra_cups > total_eng_cups :\n",
        "  print('El país que jugó más mundiales fue Francia con',total_fra_cups,'- Brasil jugó',total_bra_cups,'- Inglaterra jugó',total_eng_cups)\n",
        "elif total_eng_cups > total_bra_cups :\n",
        "    print('El país que jugó más mundiales fue Inglaterra con',total_eng_cups,'- Brasil jugó',total_bra_cups,'- Francia jugó',total_fra_cups)\n",
        "else :\n",
        "      print('El país que jugó más mundiales fue Brasil con',total_bra_cups,'- Francia jugó',total_fra_cups,'- Inglaterra jugó',total_eng_cups)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W1xevIdBPNTx"
      },
      "source": [
        "## ▶ Problem 4\n",
        "Calcule el promedio, la mediana y el desvío de los goles anotados por equipos ’locales’ (home) entre los años 2006 y 2014, inclusive. Grafique un histograma con la distribución de dicha variable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KhVshqGwPMcT",
        "outputId": "5d75c803-4f57-4c19-fc0a-8e3da73b996d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El promedio de goles anotados por equipos \"locales\" fue de: 1.2656\n"
          ]
        }
      ],
      "source": [
        "year_range = (df['Year'] >= 2006) & (df['Year'] <= 2014) #192 partidos\n",
        "htg = df[year_range]\n",
        "home_team_goals = htg[['Year','Home Team Goals']]\n",
        "mean_htg = round(np.mean(htg['Home Team Goals']),4)\n",
        "print('El promedio de goles anotados por equipos \"locales\" fue de:',mean_htg)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y6TIBeKtnL5C",
        "outputId": "5c9f74a4-80d4-49f2-b7f8-389df261f44d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La mediana de goles anotados por equipos \"locales\" fue de: 1.0\n"
          ]
        }
      ],
      "source": [
        "median_htg = np.median(htg['Home Team Goals'])\n",
        "print('La mediana de goles anotados por equipos \"locales\" fue de:',median_htg)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 134,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ChBXFFC_h9OD",
        "outputId": "36c8c35f-626e-417d-e83d-51fa800a8f01"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El desvío de goles anotados por equipos \"locales\" fue de: 1.2107\n"
          ]
        }
      ],
      "source": [
        "std_htg = round(np.std(htg['Home Team Goals']),4)\n",
        "print('El desvío de goles anotados por equipos \"locales\" fue de:',std_htg)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "urQGfqya9MLH",
        "outputId": "38d1f631-3105-4b82-f946-3f2fa51ecf2b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Este me paree que hay que borrarlo o no?\n",
        "\n",
        "params = [(mean_htg, std_htg)]\n",
        "\n",
        "\n",
        "for mu, sigma in params:\n",
        "    sn.distplot(np.random.normal(mu, sigma, 1000), hist = False, kde = True,\n",
        "                 kde_kws = {'linewidth': 2})\n",
        "    \n",
        "plt.legend(prop={'size': 8}, title = 'Parámetros')\n",
        "plt.xlabel('Valores')\n",
        "plt.ylabel('Densidad')\n",
        "plt.legend(['Goles por locales entre 2006 y 2014'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "id": "YiosTObsoVin",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "outputId": "ff95caab-aded-4486-eed0-25cd9c9fae06"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 216x216 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "ax = home_team_goals.hist(column='Home Team Goals', bins=7, grid=False, figsize=(3,3), color='#86bf91', rwidth=0.9)\n",
        "\n",
        "ax = ax[0]\n",
        "for x in ax:\n",
        "\n",
        "    x.spines['right'].set_visible(False)\n",
        "    x.spines['top'].set_visible(False)\n",
        "    x.spines['left'].set_visible(False)\n",
        "    x.set_title(\"\")\n",
        "    x.set_xlabel(\"Home Team Goals\", labelpad=20, weight='bold', size=12)\n",
        "    x.set_ylabel(\"Quantity\", labelpad=20, weight='bold', size=12)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JJ8nFGUdRl6v"
      },
      "source": [
        "##▶ *Problem 5*\n",
        "\n",
        "Obtenga la media y la varianza de la asistencia de cada partido (attendance) entre los\n",
        "años 1930 y 1960. Realice lo mismo para el período 1980 a 2010. Compare ambas\n",
        "distribuciones mediante un gráfico donde se vean dichas distribuciones sobre el mismo\n",
        "eje.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "id": "lg1vn5WpRw19",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "137cfe23-1fe9-49c2-a1ad-d7a69f04b8dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La media de la asistencia de cada partido entre 1930 y 1960 es: 29139.058823529413\n"
          ]
        }
      ],
      "source": [
        "year_range_query2 = (df['Year'] >= 1930) & (df['Year'] <= 1960)\n",
        "atte=df[year_range_query2]\n",
        "attendance = sum(atte['Attendance'])\n",
        "attendance_mean1 = attendance/len(atte['Attendance'])\n",
        "print('La media de la asistencia de cada partido entre 1930 y 1960 es:' , attendance_mean1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "3DLPjychdXbj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "219bdf63-3909-4d3d-e274-4a7e78f3895f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La varianza de la asistencia de cada partido entre 1930 y 1960 es: 773630510.0261438\n"
          ]
        }
      ],
      "source": [
        "attendance_var1 = statistics.variance(atte['Attendance'])\n",
        "print('La varianza de la asistencia de cada partido entre 1930 y 1960 es:' , attendance_var1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 142,
      "metadata": {
        "id": "ZGGzN6nEfpC5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c465ceb5-149f-4823-eb17-4ebf0df2e767"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La media de la asistencia de cada partido entre 1980 y 2010 es: 48784.69612068965\n"
          ]
        }
      ],
      "source": [
        "year_range_query2 = (df['Year'] >= 1980) & (df['Year'] <= 2010)\n",
        "atte=df[year_range_query2]\n",
        "attendance = sum(atte['Attendance'])\n",
        "attendance_mean2 = attendance/len(atte['Attendance'])\n",
        "print('La media de la asistencia de cada partido entre 1980 y 2010 es:' , attendance_mean2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 143,
      "metadata": {
        "id": "dprmbhU2fyYD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73ab249e-e9de-489d-cbbb-c6671a2475fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La varianza de la asistencia de cada partido entre 1980 y 2010 es: 390216083.0284082\n"
          ]
        }
      ],
      "source": [
        "attendance_var2 = statistics.variance(atte['Attendance'])\n",
        "print('La varianza de la asistencia de cada partido entre 1980 y 2010 es:' , attendance_var2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 144,
      "metadata": {
        "id": "MwtmdlAKf9Uf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "outputId": "53a4e0cf-b7c7-4fd1-ca02-e011124e17a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "params = [(attendance_mean1, np.sqrt(attendance_var1)),(attendance_mean2, np.sqrt(attendance_var2))]\n",
        "\n",
        "\n",
        "for mu, sigma in params:\n",
        "    sn.distplot(np.random.normal(mu, sigma, 1000), hist = False, kde = True,\n",
        "                 kde_kws = {'linewidth': 2})\n",
        "    \n",
        "plt.legend(prop={'size': 8}, title = 'Parámetros')\n",
        "plt.xlabel('Valores')\n",
        "plt.ylabel('Densidad')\n",
        "plt.legend(['1930-1960', '1980-2010'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2CCiv3X16TqH"
      },
      "source": [
        "## ▶ Problem 6\n",
        "Obtenga cual es el país que:\n",
        "1. más partidos ganó entre 1970 y 1990\n",
        "2. menos partidos ganó entre 2002 y 2010\n",
        "3. anotó la mayor cantidad de goles en el mismo partido entre 1930 y 1950\n",
        "4. más empates ha tenido"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 145,
      "metadata": {
        "id": "4zBUDvAQ6bJ1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "146585f1-d2c9-4474-b1cb-4f7e58b2ffef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El país que más partidos ganó entre 1970 y 1990 fue: Brazil con 24.0 partidos.\n"
          ]
        }
      ],
      "source": [
        "#más partidos ganó entre 1970 y 1990\n",
        "year_range_query3 = (df['Year'] >= 1970) & (df['Year'] <= 1990)\n",
        "m_w = df[year_range_query3]\n",
        "most_winner = m_w[['Year','Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "\n",
        "home_wins = most_winner.loc[most_winner['Home Team Goals']>most_winner['Away Team Goals']]\n",
        "away_wins = most_winner.loc[most_winner['Away Team Goals']>most_winner['Home Team Goals']]\n",
        "\n",
        "home_wins2 = pd.DataFrame(home_wins['Home Team Name'].value_counts())\n",
        "away_wins2 = pd.DataFrame(away_wins['Away Team Name'].value_counts())\n",
        "\n",
        "win_matches= pd.concat([home_wins2,away_wins2],axis=1)\n",
        "win_matches = win_matches.fillna(0)\n",
        "win_matches = win_matches['Home Team Name'] + win_matches['Away Team Name']\n",
        "win_matches = pd.DataFrame(win_matches).sort_values(0,ascending=False).reset_index()\n",
        "print('El país que más partidos ganó entre 1970 y 1990 fue:', win_matches.iat[0,0],'con',win_matches.iat[0,1],'partidos.')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pOzfsbIOeZEM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f0512d6-348b-4365-da3b-96e6a4e933ea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El país que más partidos perdió entre 2002 y 2010 fue:                   0\n",
            "Korea Republic  5.0\n",
            "Portugal        5.0\n",
            "Paraguay        5.0\n",
            "Saudi Arabia    5.0\n",
            "Mexico          5.0\n",
            "USA             5.0\n"
          ]
        }
      ],
      "source": [
        "#menos partidos ganó entre 2002 y 2010\n",
        "year_range_query4 = (df['Year'] >= 2002) & (df['Year'] <= 2010)\n",
        "l_w = df[year_range_query4]\n",
        "less_winner = l_w[['Year','Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "\n",
        "home_lose = less_winner.loc[less_winner['Home Team Goals'] < less_winner['Away Team Goals']]\n",
        "away_lose = less_winner.loc[less_winner['Away Team Goals'] < less_winner['Home Team Goals']]\n",
        "\n",
        "home_lose2 = pd.DataFrame(home_lose['Home Team Name'].value_counts())\n",
        "away_lose2 = pd.DataFrame(away_lose['Away Team Name'].value_counts())\n",
        "\n",
        "lost_matches= pd.concat([home_lose2,away_lose2],axis=1)\n",
        "lost_matches = lost_matches.fillna(0)\n",
        "lost_matches = lost_matches['Home Team Name'] + lost_matches['Away Team Name']\n",
        "lost_matches = pd.DataFrame(lost_matches).sort_values(0,ascending=False)\n",
        "print('El país que más partidos perdió entre 2002 y 2010 fue:', lost_matches.head(6))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "pFHxpaaZRbXG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "440e7831-8e50-45b0-c831-ed8248c2fcd7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El país que anotó la mayor cantidad de goles en el mismo partido entre 1930 y 1950 fue: Sweden con 8.0 goles.\n"
          ]
        }
      ],
      "source": [
        "#anotó la mayor cantidad de goles en el mismo partido entre 1930 y 1950\n",
        "year_range_query5 = (df['Year'] >= 1930) & (df['Year'] <= 1950)\n",
        "t_s = df[year_range_query5]\n",
        "top_scorer = t_s[['Year','Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "home_top_scorer = top_scorer.sort_values('Home Team Goals',ascending=False)\n",
        "away_top_scorer = top_scorer.sort_values('Away Team Goals',ascending=False)\n",
        "if home_top_scorer.iat[0,2] > away_top_scorer.iat[0,2]:\n",
        "  print('El país que anotó la mayor cantidad de goles en el mismo partido entre 1930 y 1950 fue:',home_top_scorer.iat[0,1],'con',home_top_scorer.iat[0,2],'goles.')\n",
        "else:\n",
        "  print('El país que anotó la mayor cantidad de goles en el mismo partido entre 1930 y 1950 fue:',away_top_scorer.iat[0,4],'con',away_top_scorer.iat[0,3],'goles.')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "id": "S6chZKtCWmlf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f4995985-e394-4820-889f-dca8154f6f31"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El país que más empates tuvo a lo largo de todos los mundiales fue: Italy con 14 partidos empatados.\n"
          ]
        }
      ],
      "source": [
        "#más empates ha tenido\n",
        "ties = df[['Year','Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "top_ties = ties.loc[ties['Home Team Goals'] == ties['Away Team Goals']]\n",
        "top_ties = top_ties.sort_values('Home Team Name')\n",
        "top_ties = top_ties['Home Team Name'].value_counts()\n",
        "top_ties = pd.DataFrame(top_ties).reset_index()\n",
        "print('El país que más empates tuvo a lo largo de todos los mundiales fue:',top_ties.iat[0,0],'con',top_ties.iat[0,1],'partidos empatados.')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zObX6bjKTqT2"
      },
      "source": [
        "## ▶ Problem 7\n",
        "Obtenga el promedio de goles a favor por partido para Argentina y Alemania en el mundial del año 2014\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "85xskoPRT2kc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "04dc5e14-6317-4e75-8bad-1c946bf674ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Promedio de goles a favor de Argentina en 2014: 1.1428571428571428\n"
          ]
        }
      ],
      "source": [
        "year_range_query6 = (df['Year'] == 2014) & (df['Home Team Name'] == 'Argentina')\n",
        "year_range_query7 = (df['Year'] == 2014) & (df['Away Team Name'] == 'Argentina')\n",
        "arg = df[year_range_query6]\n",
        "arg2 = df[year_range_query7]\n",
        "arg = arg[['Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "arg2 = arg2[['Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "arg_home = arg['Home Team Goals'].sum()\n",
        "arg_home2 = arg['Home Team Name'].value_counts()\n",
        "arg_away = arg2['Away Team Goals'].sum()\n",
        "arg_away2 = arg2['Away Team Name'].value_counts()\n",
        "arg_goals = arg_away + arg_home\n",
        "arg_goals_mean = pd.DataFrame(arg_goals/(arg_home2+arg_away2)).reset_index()\n",
        "print('Promedio de goles a favor de Argentina en 2014:',arg_goals_mean.iat[0,1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "id": "ymNWyZNofh6t",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ceeba1c6-6065-4c45-9a01-1add0b94b1be"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Promedio de goles a favor de Alemania en 2014: 2.5714285714285716\n"
          ]
        }
      ],
      "source": [
        "year_range_query8 = (df['Year'] == 2014) & (df['Home Team Name'] == 'Germany')\n",
        "year_range_query9 = (df['Year'] == 2014) & (df['Away Team Name'] == 'Germany')\n",
        "ger = df[year_range_query8]\n",
        "ger2 = df[year_range_query9]\n",
        "ger = ger[['Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "ger2 = ger2[['Home Team Name','Home Team Goals','Away Team Goals', 'Away Team Name']]\n",
        "ger_home = ger['Home Team Goals'].sum()\n",
        "ger_home2 = ger['Home Team Name'].value_counts()\n",
        "ger_away = ger2['Away Team Goals'].sum()\n",
        "ger_away2 = ger2['Away Team Name'].value_counts()\n",
        "ger_goals = ger_away + ger_home\n",
        "ger_goals_mean = pd.DataFrame(ger_goals/(ger_home2 + ger_away2)).reset_index()\n",
        "print('Promedio de goles a favor de Alemania en 2014:',ger_goals_mean.iat[0,1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dDQPO6rSpqBs"
      },
      "source": [
        "## ▶ Problem 8\n",
        "\n",
        "Grafique a través de un gráfico de barras los 10 países con más participaciones en\n",
        "mundiales."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "id": "Fe5vR8CVpwyD"
      },
      "outputs": [],
      "source": [
        "def participaciones(df, country): \n",
        "  #Esta función también se podría haber utilizado en el problema 3\n",
        "  matches = (df['Home Team Name'] == country) | (df['Away Team Name'] == country) \n",
        "  years = set(df[matches]['Year'])\n",
        "  wcp = len(years)\n",
        "  return wcp\n",
        "\n",
        "x = [(participaciones(df, country), country) for country in (set(df['Home Team Name']) | set(df['Away Team Name']))]\n",
        "x.sort(reverse = True)\n",
        "x = x[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "6_6TPv5Jbw02",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "outputId": "aa994082-719b-4104-b039-ff82cc5cfe20"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(20, 'Brazil'), (18, 'Italy'), (16, 'Argentina'), (15, 'Mexico'), (14, 'Spain'), (14, 'France'), (14, 'England'), (12, 'Uruguay'), (12, 'Belgium'), (11, 'Sweden')]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(x)\n",
        "ps = [participaciones for (participaciones, country) in x]\n",
        "cs = [country for (participaciones, country) in x]\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.bar(x=np.arange(len(ps)),\n",
        "       height=ps,\n",
        "       color=\"green\", \n",
        "       align=\"center\",\n",
        "       tick_label=cs)\n",
        "ax.set_ylabel('Participaciones')\n",
        "ax.set_title('Top 10 países con más participaciones')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zA37bOK6Lrrn"
      },
      "source": [
        "## ▶ Problem 9\n",
        "\n",
        "\n",
        "\n",
        "Determine si existe alguna ciudad que haya tenido más de 6 apariciones en mundiales\n",
        "y que en cada una de dichas ocasiones haya tenido más de 35.000 espectadores.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "id": "eyDPzN2TLzpT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "a638a49f-b40a-4420-d3bf-574fdf3e4cf6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Las siguientes ciudades tuvieron más de 6 apariciones en mundiales y en cada una de esas ocasiones, tuvo más de 35.000 espectadores\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Cities  Quantity\n",
              "0          Johannesburg         15\n",
              "1          Buenos Aires         12\n",
              "2        Frankfurt/Main         10\n",
              "3                London         10\n",
              "4     Santiago De Chile         10\n",
              "5           Saint-Denis          9\n",
              "6             Barcelona          8\n",
              "7           Los Angeles          8\n",
              "8             Cape Town          8\n",
              "9   New York/New Jersey          7\n",
              "10               Durban          7\n",
              "11             Brasilia          7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a18cbf1-22dc-41a6-bdc3-1724c1bc76de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cities</th>\n",
              "      <th>Quantity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Johannesburg</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Buenos Aires</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Frankfurt/Main</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>London</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Santiago De Chile</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Saint-Denis</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Barcelona</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Cape Town</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>New York/New Jersey</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Durban</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Brasilia</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a18cbf1-22dc-41a6-bdc3-1724c1bc76de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9a18cbf1-22dc-41a6-bdc3-1724c1bc76de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9a18cbf1-22dc-41a6-bdc3-1724c1bc76de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ],
      "source": [
        "cities = df[['City', 'Attendance']]\n",
        "city_matches = pd.DataFrame(cities['City'].value_counts())\n",
        "city_matches6 = city_matches.loc[city_matches['City'] > 6].reset_index().rename(columns = {'index':'Cities','City':'Quantity'})\n",
        "attend = cities[cities.City.isin(city_matches6.Cities)]\n",
        "top_attend = attend.loc[attend['Attendance'] > 35000]\n",
        "top_attend = pd.DataFrame(top_attend['City'].value_counts()).reset_index().rename(columns = {'index':'Cities','City':'Quantity'})\n",
        "\n",
        "print('Las siguientes ciudades tuvieron más de 6 apariciones en mundiales y en cada una de esas ocasiones, tuvo más de 35.000 espectadores')\n",
        "pd.merge(city_matches6,top_attend)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eY9oskYMTtEa"
      },
      "source": [
        "## ▶ Problem 10\n",
        "¿Cuál es la ciudad con el mayor número de partidos que han terminado con una diferencia de 3 goles?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 153,
      "metadata": {
        "id": "LCgCHGi6UHIS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc65b142-8838-4b8e-d7b5-d9df8d7eeac0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La ciudad con más partidos terminados con diferencia de 3 goles fue: Montevideo  con 5\n"
          ]
        }
      ],
      "source": [
        "cities_goals = df[['City','Home Team Goals', 'Away Team Goals']]\n",
        "cities_goals['Difference'] = pd.DataFrame(abs(cities_goals['Home Team Goals'] - cities_goals['Away Team Goals']))\n",
        "cities_goals_dif = cities_goals[['City','Difference']]\n",
        "cities_goals_dif3 = pd.DataFrame(cities_goals_dif.loc[cities_goals_dif['Difference'] == 3].value_counts()).reset_index().rename(columns = {'index':'City','Difference':'Difference'})\n",
        "cities_goals_dif3.iat[0,2]\n",
        "print('La ciudad con más partidos terminados con diferencia de 3 goles fue:',cities_goals_dif3.iat[0,0],'con',cities_goals_dif3.iat[0,2])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1-byr6Y_VXGc"
      },
      "source": [
        "# **2.2 Series Temporales**\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 154,
      "metadata": {
        "id": "-3LUCpXwZtFm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec3d158c-a4f4-4867-d039-f7e7a40bb815"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Year\n",
              "1930.0     70\n",
              "1934.0     70\n",
              "1938.0     84\n",
              "1950.0     88\n",
              "1954.0    140\n",
              "1958.0    126\n",
              "1962.0     89\n",
              "1966.0     89\n",
              "1970.0     95\n",
              "1974.0     97\n",
              "1978.0    102\n",
              "1982.0    146\n",
              "1986.0    132\n",
              "1990.0    115\n",
              "1994.0    141\n",
              "1998.0    171\n",
              "2002.0    161\n",
              "2006.0    147\n",
              "2010.0    145\n",
              "2014.0    171\n",
              "Name: total_goals, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ],
      "source": [
        "df['total_goals'] = df['total_goals'].astype(int)\n",
        "goles_por_mundial = df.groupby('Year')['total_goals'].sum()\n",
        "goles_por_mundial"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 155,
      "metadata": {
        "id": "WsRduMNnerZ3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be1ea825-f7d5-4cdd-f477-24a7ee0de0a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year\n",
            "2006.0    147\n",
            "2010.0    145\n",
            "Name: total_goals, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Armo una función para poder visualizar los valores entre ciertas fechas\n",
        "def fechas_por_periodos(df, fecha_minima, fecha_maxima = False):\n",
        "    if fecha_maxima == False:\n",
        "        print(df[fecha_minima:])\n",
        "        \n",
        "    else:\n",
        "        print(df[fecha_minima:fecha_maxima])\n",
        "        \n",
        "fechas_por_periodos(goles_por_mundial,\"2006\",\"2014\")       \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c4FD37fXmBGU"
      },
      "source": [
        "**Visualización de la Serie**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 156,
      "metadata": {
        "id": "HXnG6lBXlky4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "outputId": "77dbb90e-61e9-4a9e-e5f2-e5ff106545f8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "goles_por_mundial.plot(figsize=(18, 6), color = \"red\")\n",
        "plt.title(\"Goles por mundial\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 157,
      "metadata": {
        "id": "iYHNRIfNmFo7"
      },
      "outputs": [],
      "source": [
        "from pylab import rcParams"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JeA8jPpemvYG"
      },
      "source": [
        "##▶ Punto 1\n",
        "Realizar un Análisis Descriptivo de las Series de Tiempo (Percentiles, Promedio, Varianza, Kurtosis, Asimetría, Gráfico de Box-Plot, etc.)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 158,
      "metadata": {
        "id": "GSbBNiFEmzDR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "061ba512-f3f1-414d-9098-f644ddc0a08e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El promedio es: 118.95\n",
            "La varianza es: 1087.2078947368423\n",
            "La kurtosis es: -1.3371945092403794\n",
            "La asimetría es: 0.07936221425714736\n",
            "Los percentiles son: 0.25     89.00\n",
            "0.50    120.50\n",
            "0.75    145.25\n",
            "Name: total_goals, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print('El promedio es:', goles_por_mundial.mean())\n",
        "print('La varianza es:', goles_por_mundial.var())\n",
        "print('La kurtosis es:', goles_por_mundial.kurtosis())\n",
        "print('La asimetría es:', goles_por_mundial.skew())\n",
        "print('Los percentiles son:', goles_por_mundial.quantile([0.25,0.50,0.75]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 159,
      "metadata": {
        "id": "ZZIr_7XLs0Ny",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "outputId": "e9a7e2e3-8e71-424f-ef91-955aa54e0f64"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.boxplot(goles_por_mundial)\n",
        "plt.title(\"Boxplot de la serie de goles\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "geOZHg5-kBrn"
      },
      "source": [
        "##▶ Punto 2\n",
        "Si la serie no fuese estacionaria deberá realizar las pruebas correspondientes para\n",
        "testear la presencia de raíces unitarias."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G9kFFNRcZNwd"
      },
      "source": [
        "**Test de Dickey Fuller.**\n",
        "\n",
        "Test para testear la presencia de una raíz unitaria (si existe dicha raíz entonces la serie es no estacionaria y habrá que trabajar para salvar este problemas).\n",
        "* **Hipótesis**:\n",
        "    * **H0**: la serie posee una raíz unitaria.\n",
        "    * **H1**: la serie NO posee una raíz unitaria ( es decir, es *estacionaria*)\n",
        "    \n",
        "* **P-value**:\n",
        "    * p-value > 0.05: No rechazo H0 por lo que se puede sostener la hipótesis de presencia de raíz unitaria.\n",
        "    * p-value <= 0.05: Rechazo la H0; vicerversa."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 160,
      "metadata": {
        "id": "kQIgEfEbZ93v"
      },
      "outputs": [],
      "source": [
        "from statsmodels.tsa.stattools import adfuller, kpss\n",
        "from statsmodels.tsa.stattools import acf, pacf\n",
        "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
        "\n",
        "from pandas import datetime\n",
        "from matplotlib import pyplot\n",
        "from pandas.plotting import autocorrelation_plot"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 161,
      "metadata": {
        "id": "PSYY8DXXZ-gS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "93d2fe90-b622-4966-9963-d91ac7610258"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valor del test: 1.3057054798330834\n",
            "p-value: 0.9966406910117558\n"
          ]
        }
      ],
      "source": [
        "goles_por_mundial_df = pd.DataFrame(goles_por_mundial).reset_index().rename(columns = {'total_goals':'Goals'})\n",
        "y = goles_por_mundial_df['Goals']\n",
        "test_df = adfuller(y)\n",
        "\n",
        "print('Valor del test: {}'.format(test_df[0]))\n",
        "print('p-value: {}'.format(test_df[1]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 162,
      "metadata": {
        "id": "kBVmBCLHfQwh"
      },
      "outputs": [],
      "source": [
        "## Armo una función para presentar los resultados:\n",
        "def test_dickey_fuller(serie,alpha):\n",
        "    test = adfuller(serie)\n",
        "    dkf, pv = test[0], test[1]\n",
        "    \n",
        "    if pv > alpha:\n",
        "        print(\"El p-value ({}) es mayor que el alpha ({}).\".format(pv,alpha))\n",
        "        print(\"NO rechazo H0.\")\n",
        "        \n",
        "    else:\n",
        "        print(\"El p-value ({}) es menor que el alpha ({}).\".format(pv,alpha))\n",
        "        print(\"Rechazo H0.\")\n",
        "    \n",
        "    return dkf, pv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 163,
      "metadata": {
        "id": "Za8_3gy2gNoK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5098f8e-28bb-4188-8f15-03da0088bf14"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El p-value (0.9966406910117558) es mayor que el alpha (0.05).\n",
            "NO rechazo H0.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1.3057054798330834, 0.9966406910117558)"
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ],
      "source": [
        "## Pruebo test de Dickey Fuller con alpha de 0.05\n",
        "test_dickey_fuller(y, alpha = 0.05)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xj1qZJ4zgUDu"
      },
      "source": [
        "Como no se rechaza H0, la serie posee al menos una raíz unitaria. Es decir, hay que estacionarla."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Calculo la primera diferencia\n",
        "primera_diferencia = y.diff().fillna(0)"
      ],
      "metadata": {
        "id": "mPQyuLJspue5"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Vuelvo a probar Dickey-Fuller con la serie diferenciada una vez\n",
        "test_dickey_fuller(primera_diferencia,alpha=0.05)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEmK6yj3qO68",
        "outputId": "503eea11-534a-4b6c-cd3a-529fd28b5e52"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El p-value (3.6293405369999374e-05) es menor que el alpha (0.05).\n",
            "Rechazo H0.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-4.891094435812685, 3.6293405369999374e-05)"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora si, Rechazo H0, indicando que la serie es estacionaria."
      ],
      "metadata": {
        "id": "CQSoG5_Fq467"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 166,
      "metadata": {
        "id": "ur-NPbHihpmv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "outputId": "8ce95fab-1fd3-41d1-c175-2882fd656777"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 166
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "## Serie estacionada\n",
        "goles_por_mundial_detrend = primera_diferencia\n",
        "plt.title(\"Primera Diferencia\")\n",
        "goles_por_mundial_detrend.plot(figsize=(18,6))\n",
        "plt.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 167,
      "metadata": {
        "id": "NCGueFB9iIhF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36f5fd6c-9428-4d01-f919-727caf2b21a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El p-value (3.6293405369999374e-05) es menor que el alpha (0.05).\n",
            "Rechazo H0.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-4.891094435812685, 3.6293405369999374e-05)"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ],
      "source": [
        "## Pruebo otra vez test Dickey Fuller para la serie diferenciada una vez\n",
        "test_dickey_fuller(goles_por_mundial_detrend, alpha = 0.05)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c5CfCo86iSsZ"
      },
      "source": [
        "Ahora si, rechazamos H0, por lo tanto, la serie es estacionaria."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eq1I3fsPgmGO"
      },
      "source": [
        "## ▶ Punto 3\n",
        "Graficar la FAS, FAC y FACP de la Serie en un solo gráfico por serie y analizarlas"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "FAS = smt.stattools.acovf(goles_por_mundial)\n",
        "plt.rcParams.update({'figure.figsize':(6,6)})\n",
        "plt.stem(FAS.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "mdC5VFWjxiwI",
        "outputId": "008a4a24-1a59-44c8-c67d-c4d183fc18a5"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<StemContainer object of 3 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 168
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "metadata": {
        "id": "HWVywO3Dj_pd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 778
        },
        "outputId": "3d5ec579-387c-4016-dd5e-4399c4488431"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 169
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "## FAC\n",
        "FAC = smt.acf(goles_por_mundial, nlags = 20)\n",
        "## FACP ## en este caso, solo nos deja graficar hasta 4 lags\n",
        "FACP = smt.stattools.pacf(goles_por_mundial, nlags = 9)\n",
        "plt.rcParams.update({'figure.figsize': (6,6)})\n",
        "plot_acf(FAC.tolist(), lags=9)\n",
        "plot_pacf(FACP.tolist(), lags=4)\n",
        "plt.plot()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al analizar ambos gráficos, podemos ver que el único rezago significativo es el primero (el único que supera las bandas). Por lo tanto, se trata de un ARMA(1,1)"
      ],
      "metadata": {
        "id": "E-5KNQPm0u6o"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vty17O11nUVr"
      },
      "source": [
        "## ▶ Punto 4\n",
        "Efectuar una estimación de ambas series de tiempo a distintos modelos ARIMA y\n",
        "encontrar aquella que se ajuste mejor a los datos (pueden emplear Criterios de Información y analizar significatividad individual y global de los parámetros del modelo,\n",
        "tendencias, raíces unitarias, etc). Es importante que detallen una comparación con\n",
        "otros modelos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qkW7hTxyNyas"
      },
      "source": [
        "Al observar el gráfico de la FACP, podemos ver que solo el primero de los lags tiene importancia. Por ende, podemos suponer que el valor de p será igual a 1.\n",
        "\n",
        "Analizando el gráfico de la FAC, podemos considerar usar el valor 1 para el parámetro q."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "metadata": {
        "id": "FWz-6UuEQGNx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23193255-619c-4df3-8cc5-0c459c26a403"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                              ARMA Model Results                              \n",
            "==============================================================================\n",
            "Dep. Variable:                  Goals   No. Observations:                   20\n",
            "Model:                     ARMA(1, 1)   Log Likelihood                 -86.512\n",
            "Method:                       css-mle   S.D. of innovations             17.256\n",
            "Date:                Mon, 28 Nov 2022   AIC                            181.023\n",
            "Time:                        21:25:01   BIC                            185.006\n",
            "Sample:                             0   HQIC                           181.801\n",
            "                                                                              \n",
            "===============================================================================\n",
            "                  coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------\n",
            "const           4.6732      0.902      5.180      0.000       2.905       6.441\n",
            "ar.L1.Goals     0.3616      0.218      1.661      0.097      -0.065       0.788\n",
            "ma.L1.Goals    -1.0000      0.132     -7.580      0.000      -1.259      -0.741\n",
            "                                    Roots                                    \n",
            "=============================================================================\n",
            "                  Real          Imaginary           Modulus         Frequency\n",
            "-----------------------------------------------------------------------------\n",
            "AR.1            2.7655           +0.0000j            2.7655            0.0000\n",
            "MA.1            1.0000           +0.0000j            1.0000            0.0000\n",
            "-----------------------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "from statsmodels.tsa.arima_model import ARIMA\n",
        "\n",
        "# p --> 1, d --> 0 ,q --> 1 ARIMA Model\n",
        "model1_1 = ARIMA(goles_por_mundial_detrend, order=(1,0,1))\n",
        "model1_1_fit = model1_1.fit(disp=0)\n",
        "arma11 = model1_1_fit.aic\n",
        "print(model1_1_fit.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "metadata": {
        "id": "rCMjLf6RRI1J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58c3b08d-f1b0-47e5-f520-2993f748cd0e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "179.31492727609975\n"
          ]
        }
      ],
      "source": [
        "model2_1 = ARIMA(goles_por_mundial_detrend, order=(2,0,1))\n",
        "model2_1_fit = model2_1.fit(disp=0)\n",
        "arma21 = model2_1_fit.aic\n",
        "print(arma21)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "OjAL6by0Rs09",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c851a0f4-959c-45e7-d51b-a1787dd52f87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "179.93614771963541\n"
          ]
        }
      ],
      "source": [
        "model1_2 = ARIMA(goles_por_mundial_detrend, order=(1,0,2))\n",
        "model1_2_fit = model1_2.fit(disp=0)\n",
        "arma12 = model1_2_fit.aic\n",
        "print(arma12)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "metadata": {
        "id": "rJ8yaUulSBR4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c79ed71-12bf-404f-a684-59975a09f9e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "180.97851381437243\n"
          ]
        }
      ],
      "source": [
        "model2_2 = ARIMA(goles_por_mundial_detrend, order=(2,0,2))\n",
        "model2_2_fit = model2_2.fit(disp=0)\n",
        "arma22 = model2_2_fit.aic\n",
        "print(arma22)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 174,
      "metadata": {
        "id": "tZjd_9DbSG2g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3220318-5f34-4544-b2c1-f89e0928e59e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El modelo seleccionado por criterio de información AIC es ARMA(2,1) con AIC: 179.31492727609975\n"
          ]
        }
      ],
      "source": [
        "arma_models = [arma11,arma21,arma12,arma22]\n",
        "arma_modelsbis=set(arma_models)\n",
        "arma_modelsbis\n",
        "arma_aic = list(arma_modelsbis)\n",
        "arma_aic.sort()\n",
        "arma_aic_selected = arma_aic[0]\n",
        "arma_aic_selected\n",
        "\n",
        "\n",
        "if arma_models[0] == arma_aic_selected:\n",
        "  print('El modelo seleccionado por criterio de información AIC es ARMA(1,1) con AIC:', arma_aic_selected)\n",
        "else:\n",
        "  if arma_models[1] == arma_aic_selected:\n",
        "    print('El modelo seleccionado por criterio de información AIC es ARMA(2,1) con AIC:', arma_aic_selected)\n",
        "  else:\n",
        "    if arma_models[2] == arma_aic_selected:\n",
        "       print('El modelo seleccionado por criterio de información AIC es ARMA(1,2) con AIC:', arma_aic_selected)\n",
        "    else:\n",
        "      if arma_models[3] == arma_aic_selected:\n",
        "          print('El modelo seleccionado por criterio de información AIC es ARMA(2,2) con AIC:', arma_aic_selected)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J19oo8LKbpxs"
      },
      "source": [
        "## ▶ Punto 5\n",
        "Evaluar el desempeño del modelo a través de la metodología del ’train - test split’.\n",
        "Puede usar las métricas que considere oportunas."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import make_blobs\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt"
      ],
      "metadata": {
        "id": "9lzKBDEkfYyo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#El modelo seleccionado fue ARMA(2,1)\n",
        "ARMA_2_1 = model2_1.fit(disp=0)\n",
        "ARMA_2_1.plot_predict(dynamic=False)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "X-qvi9t2iEon",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "outputId": "5950f113-7fa9-47c7-b679-c54cac589dc4"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train = goles_por_mundial_df.Goals[:20]\n",
        "test = goles_por_mundial_df.Goals[0:]\n"
      ],
      "metadata": {
        "id": "9rhkf236i8WE"
      },
      "execution_count": 176,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arma2_1 = ARIMA(train, order=(2, 0, 1))  \n",
        "arma2_1_fit = arma2_1.fit(disp=0)  \n",
        "# Forecast\n",
        "fc, se, conf = arma2_1_fit.forecast(20, alpha=0.05)  # 95% conf\n",
        "\n",
        "# Make as pandas series\n",
        "fc_series = pd.Series(fc, index=test.index)\n",
        "#lower_series = pd.Series(conf[:, 0], index=test.index)\n",
        "#upper_series = pd.Series(conf[:, 1], index=test.index)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(12,5), dpi=80)\n",
        "#plt.plot(train, label='training')\n",
        "plt.plot(test, label='actual')\n",
        "plt.plot(fc_series, label='forecast')\n",
        "#plt.fill_between(lower_series.index, lower_series, upper_series, \n",
        " #                color='k', alpha=.15)\n",
        "plt.title('Estimados vs Reales')\n",
        "plt.legend(loc='upper left', fontsize=8)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "YH9LYbOxripG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "outputId": "3c3e4814-f6d0-470d-83bb-9e5a0ec140f6"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 960x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iOZE1FLjVXi9"
      },
      "source": [
        "# **2.3 Simulación**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 178,
      "metadata": {
        "id": "RyrypfyYn6Nk"
      },
      "outputs": [],
      "source": [
        "df_simulacion = (df['Year'] >= 1960) & (df['Year'] <= 2014) & (df['Home Team Name'] == 'Argentina') | (df['Home Team Name'] == 'England') | (df['Home Team Name'] == 'Brazil') | (df['Home Team Name'] == 'Germany')| (df['Home Team Name'] == 'Italy') | (df['Home Team Name'] == 'France') | (df['Home Team Name'] == 'Uruguay') | (df['Home Team Name'] == 'Belgium') | (df['Away Team Name'] == 'Argentina') | (df['Away Team Name'] == 'England') | (df['Away Team Name'] == 'Brazil') | (df['Away Team Name'] == 'Germany')| (df['Away Team Name'] == 'Italy') | (df['Away Team Name'] == 'France') | (df['Away Team Name'] == 'Uruguay') | (df['Away Team Name'] == 'Belgium')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z87Kgx_GrTqE"
      },
      "source": [
        "##▶ Punto 1.\n",
        "Obtener la función de distribución de los goles anotados por cada uno de los equipos;\n",
        "hay que tener en cuenta que los equipos han disputado partidos tanto de locales como\n",
        "de visitantes por lo que hay que contemplar ambas columnas a la hora de computar\n",
        "la distribución. Hint: se recomienda utilizar una distribución tabular; aunque no es la\n",
        "única solución posible."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "years = df[(df['Year'] >= 1960) & (df['Year'] <= 2014)]"
      ],
      "metadata": {
        "id": "wwsXxyJSuKDP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#funcion para calcular la frecuencia de goles de los paises solicitados\n",
        "def frecuencias(df, pais): \n",
        "  matches_home = df[(df['Home Team Name'] == pais)]\n",
        "  matches_away = df[(df['Away Team Name'] == pais)]\n",
        "  home_df = pd.merge(years,matches_home)\n",
        "  away_df = pd.merge(years,matches_away)\n",
        "  freq_home = pd.crosstab(index=home_df['Home Team Goals'], columns='count')\n",
        "  freq_away = pd.crosstab(index=away_df['Away Team Goals'], columns='count2')\n",
        "  both_freqs = pd.concat([freq_home,freq_away], axis=1).fillna(0)\n",
        "  home_away = pd.DataFrame(both_freqs['count'] + both_freqs['count2'])\n",
        "  freq_sum = home_away/home_away.sum()\n",
        "  freq_rel = (freq_sum.reset_index().rename(columns={'index': 'Goals',0:'Frequence'})).sort_values('Frequence',ascending=False)\n",
        "  freq_cum = freq_rel.cumsum().rename(columns = {'Frequence':'Frecuencia Acumulada'})\n",
        "  table_freqs = pd.concat([freq_rel,freq_cum['Frecuencia Acumulada']],axis=1).rename(columns = {'Frequence':'Frec Relativa','Frecuencia Acumulada':'Frec Acumulada'})\n",
        "  return table_freqs\n",
        "\n",
        "#funcion graficos distribuciones\n",
        "def distribucion(pais):\n",
        "  fig, ax = plt.subplots()\n",
        "  ax.bar(x=np.arange(len(frecuencias(df,pais))),\n",
        "        height=(frecuencias(df,pais)['Frec Relativa']),\n",
        "        color=\"green\", \n",
        "        align=\"center\",\n",
        "        tick_label=round(frecuencias(df,pais)['Frec Relativa'],4))\n",
        "  ax.set_ylabel('Goles')\n",
        "  ax.set_title('Frecuencia de goles por país')\n",
        "  plt.xticks(rotation=90)\n",
        "  return plt.show\n"
      ],
      "metadata": {
        "id": "cApkdfPhuHuF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Las tablas de distribuciones tabulares se han ordenado en forma decreciente, para luego utilizar la forma eficiente a la hora de simular."
      ],
      "metadata": {
        "id": "y5FhGkWSY7Yu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Argentina')\n",
        "frecuencias(df,'Argentina')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "id": "PK-kJmL7vqC9",
        "outputId": "ab418f36-e56c-422a-c32d-024e29ac0884"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.323529        0.323529\n",
              "2    2.0       0.264706        0.588235\n",
              "0    0.0       0.235294        0.823529\n",
              "3    3.0       0.073529        0.897059\n",
              "4    4.0       0.058824        0.955882\n",
              "6    6.0       0.029412        0.985294\n",
              "5    5.0       0.014706        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fdb5bad2-8ccc-4fb9-8a1f-cf20aec512d5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.323529</td>\n",
              "      <td>0.323529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.264706</td>\n",
              "      <td>0.588235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.235294</td>\n",
              "      <td>0.823529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.073529</td>\n",
              "      <td>0.897059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.058824</td>\n",
              "      <td>0.955882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.029412</td>\n",
              "      <td>0.985294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.0</td>\n",
              "      <td>0.014706</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdb5bad2-8ccc-4fb9-8a1f-cf20aec512d5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fdb5bad2-8ccc-4fb9-8a1f-cf20aec512d5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fdb5bad2-8ccc-4fb9-8a1f-cf20aec512d5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('England')\n",
        "frecuencias(df,'England')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "PsV9cyrnu4Xf",
        "outputId": "5c4e34cc-c917-4c51-af60-8bda1eee11f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.442308        0.442308\n",
              "0    0.0       0.230769        0.673077\n",
              "2    2.0       0.192308        0.865385\n",
              "3    3.0       0.115385        0.980769\n",
              "4    4.0       0.019231        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d601d86-eda0-4cf6-b76c-ada4efe34520\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.442308</td>\n",
              "      <td>0.442308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.230769</td>\n",
              "      <td>0.673077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.192308</td>\n",
              "      <td>0.865385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.115385</td>\n",
              "      <td>0.980769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.019231</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d601d86-eda0-4cf6-b76c-ada4efe34520')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2d601d86-eda0-4cf6-b76c-ada4efe34520 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2d601d86-eda0-4cf6-b76c-ada4efe34520');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Brazil')\n",
        "frecuencias(df,'Brazil')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "QtaU7vxWvWQI",
        "outputId": "5b7b20f3-a20e-4e76-ca3e-02fc96726008"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.259259        0.259259\n",
              "2    2.0       0.209877        0.469136\n",
              "3    3.0       0.209877        0.679012\n",
              "0    0.0       0.172840        0.851852\n",
              "4    4.0       0.135802        0.987654\n",
              "5    5.0       0.012346        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6afd083-9a85-4e01-ac94-9d183145e454\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.259259</td>\n",
              "      <td>0.259259</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.209877</td>\n",
              "      <td>0.469136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.209877</td>\n",
              "      <td>0.679012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.172840</td>\n",
              "      <td>0.851852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.135802</td>\n",
              "      <td>0.987654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.0</td>\n",
              "      <td>0.012346</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6afd083-9a85-4e01-ac94-9d183145e454')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b6afd083-9a85-4e01-ac94-9d183145e454 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b6afd083-9a85-4e01-ac94-9d183145e454');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Germany')\n",
        "frecuencias(df,'Germany')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "id": "yEKpVkOlvbS8",
        "outputId": "a498dc52-aebb-470b-efbc-e8ee62722035"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.342105        0.342105\n",
              "2    2.0       0.210526        0.552632\n",
              "0    0.0       0.131579        0.684211\n",
              "3    3.0       0.131579        0.815789\n",
              "4    4.0       0.131579        0.947368\n",
              "5    7.0       0.026316        0.973684\n",
              "6    8.0       0.026316        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-56484b82-d770-470e-bb08-b3e0e0b2e4c6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.342105</td>\n",
              "      <td>0.342105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.210526</td>\n",
              "      <td>0.552632</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.131579</td>\n",
              "      <td>0.684211</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.131579</td>\n",
              "      <td>0.815789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.131579</td>\n",
              "      <td>0.947368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7.0</td>\n",
              "      <td>0.026316</td>\n",
              "      <td>0.973684</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>8.0</td>\n",
              "      <td>0.026316</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56484b82-d770-470e-bb08-b3e0e0b2e4c6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-56484b82-d770-470e-bb08-b3e0e0b2e4c6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-56484b82-d770-470e-bb08-b3e0e0b2e4c6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Italy')\n",
        "frecuencias(df,'Italy')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "j1UOx1F4vdtX",
        "outputId": "cbacb5c8-a8a1-495a-a3fb-957bce46c559"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.391304        0.391304\n",
              "2    2.0       0.260870        0.652174\n",
              "0    0.0       0.202899        0.855072\n",
              "3    3.0       0.115942        0.971014\n",
              "4    4.0       0.028986        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aae1c249-f5eb-430e-9247-ed82a7e2e860\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.391304</td>\n",
              "      <td>0.391304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.260870</td>\n",
              "      <td>0.652174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.202899</td>\n",
              "      <td>0.855072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.115942</td>\n",
              "      <td>0.971014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.028986</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aae1c249-f5eb-430e-9247-ed82a7e2e860')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aae1c249-f5eb-430e-9247-ed82a7e2e860 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aae1c249-f5eb-430e-9247-ed82a7e2e860');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('France')\n",
        "frecuencias(df,'France')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "6QJnRtwFvihV",
        "outputId": "dc30280f-1a89-4661-9e98-acd3969df067"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.355556        0.355556\n",
              "0    0.0       0.244444        0.600000\n",
              "3    3.0       0.155556        0.755556\n",
              "2    2.0       0.133333        0.888889\n",
              "4    4.0       0.088889        0.977778\n",
              "5    5.0       0.022222        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31b5377e-5d2e-4d42-a0c5-645ade1e2362\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.355556</td>\n",
              "      <td>0.355556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.244444</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.155556</td>\n",
              "      <td>0.755556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.133333</td>\n",
              "      <td>0.888889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.088889</td>\n",
              "      <td>0.977778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.0</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31b5377e-5d2e-4d42-a0c5-645ade1e2362')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-31b5377e-5d2e-4d42-a0c5-645ade1e2362 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-31b5377e-5d2e-4d42-a0c5-645ade1e2362');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Uruguay')\n",
        "frecuencias(df,'Uruguay')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "fqzd0FjTvnrm",
        "outputId": "e840e925-c459-4a6f-ccf1-d45a28b93187"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "0    0.0       0.394737        0.394737\n",
              "1    1.0       0.368421        0.763158\n",
              "2    2.0       0.184211        0.947368\n",
              "3    3.0       0.052632        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecc6967d-acf4-4f20-b86b-3640fbc011a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.394737</td>\n",
              "      <td>0.394737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.368421</td>\n",
              "      <td>0.763158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.184211</td>\n",
              "      <td>0.947368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.052632</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecc6967d-acf4-4f20-b86b-3640fbc011a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ecc6967d-acf4-4f20-b86b-3640fbc011a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ecc6967d-acf4-4f20-b86b-3640fbc011a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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dGgzICYA99TG15S2EVtW0hxJ/ZL6161b97QLjYiILY3pg9S2F9jutd3b09PT7XIiInYobQbEWmBSbXxiaWt72YiIGAFtBsRSYJqkqZLGA7OBviEuuwQ4VtI+5eD0saUtIiJGSWsBYXsDMJfqg/2nwJW2l0uaJ+kEAEkvk7QGOBm4RNLysuyDwAeoQmYpMK+0RUTEKNm1zZXbXgws7mg7tza8lKr7qGnZhcDCNuuLiIiBjemD1BER0Z4ERERENEpAREREowREREQ0SkBERESjBERERDRKQERERKMERERENEpAREREowREREQ0SkBERESjBERERDRKQERERKMERERENEpAREREowREREQ0SkBERESjVgNC0kxJKyWtknR2w/TdJH25TP+hpCmlfYqkxyQtK4/PtVlnRERsqbVbjkoaB8wHjgHWAEsl9dleUZvtdGC97YMlzQY+CrypTLvD9mFt1RcREYNr857UM4BVtlcDSFoEzALqATELOL8MXwV8VpJarCkidkC6YOf+2PB5bmW9bXYxTQDuqY2vKW2N89jeADwM7FemTZV0q6TvSHp1i3VGRESDNvcghuNeYLLtByS9FPiapENtP1KfSdIcYA7A5MmTu1BmRMSOq809iLXApNr4xNLWOI+kXYHnAA/Yftz2AwC2bwbuAA7pfALbC2z32u7t6elp4SVEROy82gyIpcA0SVMljQdmA30d8/QBp5bhNwLX27aknnKQG0nPB6YBq1usNSIiOrTWxWR7g6S5wBJgHLDQ9nJJ84B+233AZcDlklYBD1KFCMARwDxJTwIbgXfZfrCtWiMiYkutHoOwvRhY3NF2bm34v4GTG5a7Gri6zdoiImJw+SV1REQ0SkBERESjBERERDRKQERERKMERERENEpAREREowREREQ0SkBERESjBERERDRKQERERKMERERENEpAREREowREREQ0SkBERESjBERERDRKQERERKMERERENEpAREREo1YDQtJMSSslrZJ0dsP03SR9uUz/oaQptWnnlPaVko5rs86IiNhSawEhaRwwH3gdMB04RdL0jtlOB9bbPhj4JPDRsux0YDZwKDATuLisLyIiRkmbexAzgFW2V9t+AlgEzOqYZxbwD2X4KuC1klTaF9l+3PadwKqyvoiIGCW7trjuCcA9tfE1wMsHmsf2BkkPA/uV9hs7lp3Q+QSS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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distribucion('Belgium')\n",
        "frecuencias(df,'Belgium')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "f8n5EJLIvkPA",
        "outputId": "af3637d4-92cf-43a5-b594-fffe7eacaf8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Goals  Frec Relativa  Frec Acumulada\n",
              "1    1.0       0.371429        0.371429\n",
              "0    0.0       0.257143        0.628571\n",
              "2    2.0       0.257143        0.885714\n",
              "3    3.0       0.085714        0.971429\n",
              "4    4.0       0.028571        1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89ae845f-5426-42af-8647-9b8af33b913d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Goals</th>\n",
              "      <th>Frec Relativa</th>\n",
              "      <th>Frec Acumulada</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.371429</td>\n",
              "      <td>0.371429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.257143</td>\n",
              "      <td>0.628571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>0.257143</td>\n",
              "      <td>0.885714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>0.085714</td>\n",
              "      <td>0.971429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>0.028571</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89ae845f-5426-42af-8647-9b8af33b913d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-89ae845f-5426-42af-8647-9b8af33b913d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-89ae845f-5426-42af-8647-9b8af33b913d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hRfNVeIRAUsk"
      },
      "outputs": [],
      "source": [
        "arg_dist_away = arg_df.groupby(by = \"Away Team Goals\")[\"Away Team Goals\"].count()/len(arg_df)\n",
        "#arg_dist_away = pd.DataFrame(arg_dist_away, axis = \"Goals\")\n",
        "arg_dist_away.rename(axis = {\"Away Team Goals\", \"Frecuencia\"}, inplace = True)\n",
        "arg_dist_away = pd.DataFrame(arg_dist_away, columns = ['Away Team Goals' , 'Frecuencia'], index=[0,1,2,3,4,5,6])\n",
        "\n",
        "arg_dist_away.append({\"Away Team Goals\":\"5\",\n",
        "                      \"Frecuencia\" : \"0\"},\n",
        "                     ignore_index=True)\n",
        "\n",
        "\n",
        "arg_dist_away"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 130,
      "metadata": {
        "id": "v7Smqh3Zz6J5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1db61630-4115-4e4d-a8ec-1da575e4fdb0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Home Team Goals\n",
              "0.0    0.269231\n",
              "1.0    0.307692\n",
              "2.0    0.250000\n",
              "3.0    0.134615\n",
              "4.0    0.038462\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ],
      "source": [
        "eng_dist= eng_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(eng_df)\n",
        "eng_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        "eng_dist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rz15JUyW0IRZ"
      },
      "outputs": [],
      "source": [
        " bra_dist= bra_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(bra_df)\n",
        " bra_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " bra_dist\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5WKVHGRZ0KiE"
      },
      "outputs": [],
      "source": [
        " ger_dist= ger_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(ger_df)\n",
        " ger_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " ger_dist\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d0CuQ2m90RLx"
      },
      "outputs": [],
      "source": [
        " ita_dist= ita_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(ita_df)\n",
        " ita_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " ita_dist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NYe1qcen0YVh"
      },
      "outputs": [],
      "source": [
        " fra_dist= fra_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(fra_df)\n",
        " fra_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " fra_dist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q8b8FTzC0gyo"
      },
      "outputs": [],
      "source": [
        " uru_dist= uru_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(uru_df)\n",
        " uru_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " uru_dist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TkHOKBQe0hxs"
      },
      "outputs": [],
      "source": [
        " bel_dist= bel_df.groupby(by = \"Home Team Goals\")[\"Home Team Goals\"].count()/len(bel_df)\n",
        " bel_dist.rename(axis = {\"Home Team Goals\" : \"Frecuencia\"}, inplace = True)\n",
        " bel_dist\n",
        " "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Punto 4.\n",
        "Realizar la simulación completa (con un K que considere adecuado) para obtener el\n",
        "listado de veces que ha ganado el torneo cada equipo."
      ],
      "metadata": {
        "id": "hC3fMbp2JPSI"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "5iYq2P5H0nQM"
      },
      "outputs": [],
      "source": [
        "import random"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El torneo arranca desde cuartos de final porque hay solo 8 equipos, por lo tanto se deben armar 4 llaves de dos equipos cada una. Para armar las llaves, tomamos el orden que venía dado por la tabla presente en el enunciado. Es decir,\n",
        "> Llave 1: Argentina - Inglaterra\n",
        "\n",
        "> Llave 2: Brasil - Alemania\n",
        "\n",
        "> Llave 3: Italia - Francia\n",
        "\n",
        "> Llave 4: Uruguay - Belgica"
      ],
      "metadata": {
        "id": "AOOtxdTHZ21E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#GOLES DE ARGENTINA EN 4TOS\n",
        "x = random.uniform(0,1)\n",
        "arg_4 = frecuencias(df,'Argentina')\n",
        "\n",
        "if (x < arg_4.iat[0,2]):\n",
        "   print('Argentina hizo', arg_4.iat[0,0] ,'gol')\n",
        "   print(x)\n",
        "else:\n",
        "  if (arg_4.iat[0,2]<= x < arg_4.iat[1,2]):\n",
        "    print('Argentina hizo', arg_4.iat[1,0] ,'goles')\n",
        "    print(x)\n",
        "  else:\n",
        "    if (arg_4.iat[1,2]<= x < arg_4.iat[2,2]):\n",
        "      print('Argentina hizo', arg_4.iat[2,0] ,'goles')\n",
        "      print(x)\n",
        "    else:\n",
        "      if (arg_4.iat[2,2]<= x < arg_4.iat[3,2]):\n",
        "        print('Argentina hizo', arg_4.iat[3,0] ,'goles')\n",
        "        print(x)\n",
        "      else:\n",
        "        if (arg_4.iat[3,2]<= x < arg_4.iat[4,2]):\n",
        "          print('Argentina hizo', arg_4.iat[4,0] ,'goles')\n",
        "          print(x)\n",
        "        else:\n",
        "          if (arg_4.iat[4,2]<= x < arg_4.iat[5,2]):\n",
        "            print('Argentina hizo', arg_4.iat[5,0] ,'goles')\n",
        "            print(x)\n",
        "          else:\n",
        "            if (arg_4.iat[5,2]<= x < arg_4.iat[6,2]):\n",
        "              print('Argentina hizo', arg_4.iat[6,0] ,'goles')\n",
        "              print(x)"
      ],
      "metadata": {
        "id": "FoH96PgYKOBA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94466e16-3b9b-4417-c79e-f499aa4aef9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Argentina hizo 0.0 goles\n",
            "0.8176358826271912\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#FUNCION PARA PARTIDOS, ver la siguiente que es más genéricaS\n",
        "#def partido(pais):\n",
        "#  if (x < frecuencias(df,pais).iat[0,2]):\n",
        "    #print(pais,'hizo', frecuencias(df,pais).iat[0,0] ,'gol')\n",
        "#    goles = frecuencias(df,pais).iat[0,0]\n",
        "#  else:\n",
        "#    if (frecuencias(df,pais).iat[0,2]<= x < frecuencias(df,pais).iat[1,2]):\n",
        "#      #print(pais,'hizo', frecuencias(df,pais).iat[1,0] ,'goles')\n",
        "#      goles = frecuencias(df,pais).iat[1,0]\n",
        "#    else:\n",
        "#      if (frecuencias(df,pais).iat[1,2]<= x < frecuencias(df,pais).iat[2,2]):\n",
        "        #print(pais,'hizo', frecuencias(df,pais).iat[2,0] ,'goles')\n",
        "#        goles = frecuencias(df,pais).iat[2,0]\n",
        "#      else:\n",
        " #       if (frecuencias(df,pais).iat[2,2]<= x < frecuencias(df,pais).iat[3,2]):\n",
        "          #print(pais,'hizo', frecuencias(df,pais).iat[3,0] ,'goles')\n",
        "  #        goles = frecuencias(df,pais).iat[3,0]\n",
        "  #      else:\n",
        "  #        if (frecuencias(df,pais).iat[3,2]<= x < frecuencias(df,pais).iat[4,2]):\n",
        "   #         #print(pais,'hizo', frecuencias(df,pais).iat[4,0] ,'goles')\n",
        "    #        goles = frecuencias(df,pais).iat[4,0]\n",
        "     #     else:\n",
        "      #      if (frecuencias(df,pais).iat[4,2]<= x < frecuencias(df,pais).iat[5,2]):\n",
        "              #print(pais,'hizo', frecuencias(df,pais).iat[5,0] ,'goles')\n",
        "       #       goles = frecuencias(df,pais).iat[5,0]\n",
        "        #    else:\n",
        "         #     if (frecuencias(df,pais).iat[5,2]<= x < frecuencias(df,pais).iat[6,2]):\n",
        "          #      #print(pais,'hizo', frecuencias(df,pais).iat[6,0] ,'goles')\n",
        "           #     goles = frecuencias(df,pais).iat[6,0]\n",
        "  #return int(goles)"
      ],
      "metadata": {
        "id": "M2BJmiK6qRBk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def partido(pais):\n",
        "  i=0\n",
        "  x= random.uniform(0,1)\n",
        "  nrows=len(frecuencias(df,pais))\n",
        "  while i< nrows:\n",
        "    if ( x < frecuencias(df,pais).iat[i,2]):\n",
        "      #print(pais,'hizo', frecuencias(df,pais).iat[0,0] ,'gol')\n",
        "      goles = frecuencias(df,pais).iat[i,0]\n",
        "      return int(goles)\n",
        "    else:\n",
        "       i += 1"
      ],
      "metadata": {
        "id": "tttjDuj_SzOz"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#x=0.14\n",
        "\n",
        "partido('Germany')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YdJkBsMMrXDC",
        "outputId": "e957c993-8931-4a78-9dff-8893025f5c31"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#FUNCION PARA SABER QUIEN GANO EL PARTIDO\n",
        "def winner(pais1, pais2):\n",
        "  if (partido(pais1) != partido(pais2) & partido(pais1) > partido(pais2)):\n",
        "    ganador = pais1\n",
        "    #print('El partido lo ganó',ganador, partido(pais1),'-',partido(pais2))\n",
        "  else:\n",
        "    if (partido(pais1) != partido(pais2) & partido(pais1) < partido(pais2)):\n",
        "      ganador = pais2\n",
        "      #print('El partido lo ganó',ganador, partido(pais1),'-',partido(pais2))\n",
        "      \n",
        "    else:#empate\n",
        "      y = random.uniform(0,1)\n",
        "      #ganador = winner(pais1,pais2)\n",
        "      #winner(pais1,pais2)   \n",
        "      if y==0:\n",
        "        ganador = pais1\n",
        "        #say = print('El partido lo ganó',ganador,'por penales.')\n",
        "      else:\n",
        "        ganador = pais2\n",
        "        #say = print('El partido lo ganó',ganador,'por penales.')      \n",
        "        #return say\n",
        "  \n",
        "  return ganador\n",
        "  \n",
        "  "
      ],
      "metadata": {
        "id": "27iiJs_ZugcX"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#FUNCION PARA SABER QUIEN GANO EL PARTIDO\n",
        "def winner(pais1, pais2):\n",
        "  goals_team_1 = partido(pais1)\n",
        "  goals_team_2 = partido(pais2)\n",
        "  if goals_team_1 > goals_team_2:\n",
        "    ganador = pais1\n",
        "  elif goals_team_1 == goals_team_2:\n",
        "      ganador = winner(pais1,pais2)\n",
        "  else:\n",
        "      ganador = pais2\n",
        "\n",
        "  \n",
        "  return ganador"
      ],
      "metadata": {
        "id": "_U4AGqN-pWCX"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "winner('Argentina','England')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "hrHyo1oPuBpt",
        "outputId": "ae4e4be0-b65f-4626-f3d4-3729da8b7914"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Argentina'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Cuartos de final**"
      ],
      "metadata": {
        "id": "0dGetd9e-w48"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cuartos_1 = winner('Argentina','England')\n",
        "cuartos_2 = winner('Brazil','Germany')\n",
        "cuartos_3 = winner('Italy','France')\n",
        "cuartos_4 = winner('Uruguay','Belgium')"
      ],
      "metadata": {
        "id": "PJgnWuN-xXPW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "007562f4-ac16-4693-f10d-81ba6d5fb27b"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El partido lo ganó France por penales.\n",
            "El partido lo ganó Belgium por penales.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Semifinal**"
      ],
      "metadata": {
        "id": "0VioGoAQAq6i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "semi_1 = winner(cuartos_1,cuartos_2)\n",
        "semi_2 = winner(cuartos_3,cuartos_4)"
      ],
      "metadata": {
        "id": "4eanOQFxzlQ3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Final**"
      ],
      "metadata": {
        "id": "c15yThRIBAGI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "winner(semi_1,semi_2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "aE5EHcYmBCcQ",
        "outputId": "b82d31d4-316e-4a4f-bb71-48884f4244aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Brazil'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#funcion para mundial\n",
        "def mundial(pais1,pais2,pais3,pais4,pais5,pais6,pais7,pais8):\n",
        "  cuartos_1 = winner(pais1,pais2)\n",
        "  cuartos_2 = winner(pais3,pais4)\n",
        "  cuartos_3 = winner(pais5,pais6)\n",
        "  cuartos_4 = winner(pais7,pais8)\n",
        "  semi_1 = winner(cuartos_1,cuartos_2)\n",
        "  semi_2 = winner(cuartos_3,cuartos_4)\n",
        "  final = winner(semi_1,semi_2)\n",
        "  return final"
      ],
      "metadata": {
        "id": "3jVYBxvzBlho"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mundial('Argentina','England','Brazil','Germany','Italy','France','Uruguay','Belgium')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "ndx87EN9DXX5",
        "outputId": "e2f202de-b817-4e04-efe4-a7fb6c81aff2"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Germany'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Simulamos el torneo k veces\n",
        "def Torneo(k):\n",
        "  ganan = []\n",
        "  for i in range(k) :\n",
        "    torneos = torneo('Argentina','England','Brazil','Germany','Italy','France','Uruguay','Belgium')\n",
        "    ganan.append(torneos)\n",
        "    ganadores = pd.DataFrame(ganan,columns = ['Ganadores del torneo'])\n",
        "  return(ganadores)"
      ],
      "metadata": {
        "id": "-w9ydxleA2uL"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "campeones = Torneo(100)"
      ],
      "metadata": {
        "id": "pn3we455JvzG"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mylist = [] #esto es para poner un 1 al lado de cada vez que salio campeón el país \n",
        "           #asi despues lo agrupo y saco la frecuencia, igual seguro se puede simplificar de otra forma\n",
        "n_repetir = len(campeones)\n",
        "a=[1]\n",
        "\n",
        "for v in a:\n",
        "    l = [v] * n_repetir\n",
        "    mylist = mylist + l\n",
        "\n",
        "mylist\n",
        "\n",
        "campeones_df = pd.DataFrame(campeones)\n",
        "campeones_df['fx'] = mylist\n",
        "\n",
        "campeones_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "IpyAdurrzmAc",
        "outputId": "19f287a9-9594-488a-9557-e177cbd1ff3a"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Ganadores del torneo  fx\n",
              "0                Brazil   1\n",
              "1               Belgium   1\n",
              "2                Brazil   1\n",
              "3               Belgium   1\n",
              "4               Germany   1\n",
              "..                  ...  ..\n",
              "95              Germany   1\n",
              "96               France   1\n",
              "97               Brazil   1\n",
              "98               Brazil   1\n",
              "99              Belgium   1\n",
              "\n",
              "[100 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4326a064-a238-405a-9c9f-28d17821fede\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ganadores del torneo</th>\n",
              "      <th>fx</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Germany</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>Germany</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4326a064-a238-405a-9c9f-28d17821fede')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4326a064-a238-405a-9c9f-28d17821fede button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4326a064-a238-405a-9c9f-28d17821fede');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "campeones_freq= campeones_df.groupby(by = \"Ganadores del torneo\")[\"Ganadores del torneo\"].count()/len(campeones_df)\n",
        "campeones_freq"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zIyQi5CztdDi",
        "outputId": "984d9ad9-b664-4725-e857-ec7bde429ade"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ganadores del torneo\n",
              "Argentina    0.13\n",
              "Belgium      0.12\n",
              "Brazil       0.24\n",
              "England      0.04\n",
              "France       0.16\n",
              "Germany      0.16\n",
              "Italy        0.12\n",
              "Uruguay      0.03\n",
              "Name: Ganadores del torneo, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "P1fhdOmu7M_J",
        "Ruor9q5L60WN",
        "W1xevIdBPNTx",
        "JJ8nFGUdRl6v",
        "2CCiv3X16TqH",
        "zObX6bjKTqT2",
        "dDQPO6rSpqBs",
        "zA37bOK6Lrrn",
        "eY9oskYMTtEa",
        "1-byr6Y_VXGc",
        "JeA8jPpemvYG",
        "geOZHg5-kBrn"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
